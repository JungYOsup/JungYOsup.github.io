body,
p {
  background-image: url(/assets/images/practice/lecture/bg.png);
  color: #999;
  margin: 0;
}

h1,
h2,
h3,
ul {
  padding: 0;

  margin: 0;
}
li {
  list-style-type: none;
}

/* l_wrapper , l_sidebar 처럼 class이름에 layout_sidebar의 약어인 l_sidebar라고 나타냈다.
그 이유는 이 부분은 레이아웃만 담당이라는것을 명시하기 위함이라고 한다. 
배경색이라던가 이런것 역시 담당이 아닌 오로지 레이아웃 즉 뼈대만 담당하는 용도라는 것을 명시하기 위함
또한 이렇게 뼈대들은 똑같은 뼈대들이 있는 화면이 있을때 재활용해서 사용 가능하며, 따로 css를 만들어서 import해서 사용해도 
좋을것 같다*/

/* ---------------Layours :뼈대---------------------- */

.l_wrapper {
  max-width: 980px;

  /* width % 는 부모의 사이즈에 따라서 계속 80%를 유지하려고 하기때문에 화면을 줄여도 줄인만큼의 80%를 계속 유지한다.
  px 의 경우 고정적이기 때문에 화면을 줄인거에 상관없이 그 px를 유지하려한다.
  
  max-width CSS 속성은 요소의 최대 너비를 설정합니다. max-width는 width 속성의 사용값이 자신의 값보다 커지는걸 방지합니다.

  max-width px일 경우*/
  margin: 0 auto;
}

.l_sidebar {
  float: right;
  margin-left: 20px;
  width: 300px;
}

.l_main {
  overflow: hidden;
  /* float: right; */
  /* width: 680px;  */
  /* overflow: hidden ? 나였으면 main에 일정크기를 먼저 주고 sidebar에도 일정크기를 준다음 
  clear를 이용했을것 같은데... 뭐가 더 나은방법일까? 
  그런데 부모요소가 아닌 그냥 얘한테 overflow : hidden을 주었네, 원래 overflow :hidden의 이미가
  넘어버리면 숨긴다는 얘긴데... 여기서는 어떠한 역할을 하는지 모르곘다..*/
}

/* .l_wrapper::after {
  display: block;
  content: " ";
  clear: both;
} */

/* wrapper에 주면 되지 굳이 contents 클래스를 만들었나 싶었는데, 앞서 말했듯이 l_wrapper는 레이아웃의 담당이고 나중에 다른곳에 
l_wrapper라는 클래스만 적용해서 다시 재활용해서 사용할수도 있으므로 contents라는 클래스를 만들어 거기다가 padding을 주었다.
l_wrapper에 padding을 주면 나중에 다론곳에 사용했을때도 padding이 적용되니까*/

/* ------------Components---------------- */

.contents {
  padding: 40px 0;
}

.checkout {
  background-color: #666;
}

.checkout-section {
  margin: 20px;
  background-color: rgba(255, 255, 255, 0.05);

  /* margin 상쇄 효과 부분 */

  /* 나는 같이 붙어있는 형제한테 margin 20px씩 주면 그 형제의 간격이 40px이 차이날줄 알았는데 20px 차이가 나더라
  블록의 top 및 bottom 마진은 때로는 (결합되는 마진 중 크기가) 가장 큰 한 마진으로 결합(combine, 상쇄(collapsed))됩니다, 마진 상쇄(margin collapsing)로 알려진 행동
  -MDN-*/

  /* 부모박스와 마지막 자식박스의 하단 마진이 겹칠때는 부모 박스의 바깥으로만 랜더링이 되므로 하단의 margin이 0인건처럼 보이게 된다.
  이 문제의 해결방법은 부모요소에 경계를 줄수 있는 padding 이나 border를 준다. but 이것은 시각적으로 보일수 있으므로 
  시각적으로 보이지 않게 하기 위해 display:flow-root (flow-root 는 호환성이 별루..) 나 overflow:hidden 또는 가상요소를 만들어주어 사용한다.
  그러나 overflow:hidden를 사용하면 overflow:hidden 자체의 목적인 "넘쳤을때 자른다"라는 의미에 맞지 않게 사용되므로 가상요소를 사용하여 해결해주는것이 좋을것 같다.*/
}

.video {
  position: relative;
  background-color: dodgerblue;
  padding-top: 56.25%;
}

/* 나중에 비디오가 핸드폰화면에서도 비율을 유지하기 위해서는 px단위 처럼 정해진 값을 주면 안된다.
그래서 사용 한게 % 인데, 그렇다고 해서 height 에 % 를 주면 안됌 
heigh에서 %는 부모의 높이에 따른 비율인데 지금 부모의 높이가 없으므로 안됨  따라서 padding-top를 사용해서 높이를 만들어줌 
padding-top의 %는 자기 자신의 너비에(현재 자기 자신의 너비가 명시되어 있지 않으므로 부모의 너비를 따름 즉 300px) 따른 높이의 비율을 정해줌 , 따라서 paddig-top : 100%는 정사각형이 나오게 됨 
하지만 우리 비디오가 16:9 비율이기 때문에 56.25%를 주면 16:9비율이 만들어져 화면이 꽉 차게 들어간다.
그리고 나중에 우리가 핸드폰 화면에서도 그 비율이 유지가 된다.

padding-top : 100%를 줘도 .video-iframe에 width 와 height 를 100% 를 주었기 때문에 높이와 너비가 꽉차지만 화면이 16:9 비율이므로 화면으로 꽉차지는 않는다. 

*/

.video-iframe {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;

  /* left: 0;  top: 0;  bottom: 0; right: 0; 가  width : 100% 와 hegiht 100% 인줄알았는데 그게 아닌듯.. */
}

.price {
  font-weight: bold;
  color: orangered;
  font-size: 40px;
}

.price-discount {
  position: relative;
  font-weight: normal;
  color: #333;
  font-size: 0.5em;
}

.price-discount::before {
  content: " ";
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0.6em;
  opacity: 0.5;
  height: 2px;
  background-color: white;
}

/* through-line을 직접 만들었는데,  별로 좋은 방법은 아니라고 함*/

.course-cover {
  background-image: url(/assets/images/practice/lecture/cover.png);
  padding: 30px;
  background-size: cover;
  background-position: center;
  position: relative;
}

.course-cover::after {
  content: " ";
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0.5;
  background: -moz-linear-gradient(
    top,
    rgba(0, 0, 0, 0) 0%,
    rgba(0, 0, 0, 0.65) 100%
  );
  background: -webkit-linear-gradient(
    top,
    rgba(0, 0, 0, 0) 0%,
    rgba(0, 0, 0, 0.65) 100%
  );
  background: linear-gradient(
    to bottom,
    rgba(0, 0, 0, 0) 0%,
    rgba(0, 0, 0, 0.65) 100%
  );
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00000000', endColorstr='#a6000000',GradientType=0 );
}

.course-creator,
.course-title {
  position: relative;
  z-index: 10;
  /* z-index를 주기 위해서는 position을 주어야한다. */
}

/* 텍스트가 흰색이라 잘 안보이는 경우가 있는데,배경을 줄때 어떤 이미지를 주더라도 텍스트가 잘 보이게끔 하기 위해 배경안에 또 다른 레이아웃을 넣어주고 특정 지역을 어둡게 하여 텍스트 있는 쪽은 잘 보이게끔 하기도 한다.*/

.course-section {
  margin: 20px 0px;
}

.course-creator {
  float: right;
  margin-left: 10px;
  width: 100px;
  text-align: right;
}

/* 전문가가 float는 주는 테그가 위에 자리 잡아야한다고 한다.
그 이유를 아직 모르겠다.*/

.course-creator img {
  border-radius: 50%;
  width: 50px;
}

.course-creator-contents {
  padding: 5px;
}
.course-creator-contents strong {
  display: block;
}

.course-title {
  overflow: hidden;
}
/* overfolw : hidden을 주는 이유를 잘 모르겠다..
그리고 그것을 주었을때 왜 그 모양이 나오는지도*/
.course-title h1 {
  color: white;
  font-size: 50px;
  line-height: 1.4;
  font-weight: bold;
  margin-bottom: 20px;
  text-transform: uppercase;
}
/* line-height 에 대해서 찾아보자 */

.course-title p {
  margin-bottom: 20px;
}

.course-section {
  margin: 20px 0;
}
.course-section h2 {
  font-size: 30px;
  color: white;
  border-bottom: 2px solid;
}

.curriculum {
  background-color: #333;
}

.curriculum-item {
  background-color: #666;
  margin-bottom: 10px;
}
.curriculum-item:last-child {
  margin-bottom: 0;
}
/* margin 중복현상때문에 사라지긴 하지만 명시해주는것이 좋다. */

.curriculum-item h3 {
  padding: 10px 20px;
  /* marging을 줄경우 상단에 마진 겹침현상이 발생한다. */
}

.curriculum-item-list {
  background-color: #111;
  padding: 20px 0;
  margin: 5px;
}

.curriculum-link {
  background-color: rgba(255, 255, 255, 0.05);
  display: block;
  margin: 5px 20px;
  padding: 10px;
}

.curriculum-link span {
  float: right;
  font-size: 10px;
}
/* CSS방법론에 따르면 CSS선택자로 아이디와 태그를 사용하지 말것을 권장한다고함  */

.curriculum-link::before {
  content: "▶";
  font-size: 10px;
}

.curriculum-link:hover {
  color: white;
}
/* -----Commons : 공통적으로 사용할수 있는 것들-----*/

/* 마진 상쇄가 자주 발생하므로 이것을 통해 해결 */
.clearfix:after,
.clearfix::before {
  content: " ";
  display: table;
  /* 마진 상쇄의 해결방법 : 가상요소를 만들어 주되 이 문제는 block과 block 사이에서 발생하는 문제이므로
  diplay를 block도 inline(inline은 위 아래가 아닌 흐름이자네~)도 아닌요소인 table로 해준다. */
}

a {
  text-decoration: none;
  color: inherit;
}

.button {
  background-color: #333;
  color: white;
  padding: 0.5em 1em;
  display: inline-block;
  /* a 태그는 inline 요소이므로 padding을 주면 안된다고 했다.
  why? 여기서는 부모밖으로 튀어 나오는 쓸때없는 영역을 차지하기 때문에 하지만 padding을 주고 싶어서 display를 inline-block으로 바꿈  
  
  보통 버튼은 inline-block으로 많이 해줌*/
}

.button_block {
  display: block;
  text-align: center;
}

.button_important {
  background-color: orangered;
}

/* 버튼끼리의 간격을 어떻게 주는게 좋을까?
버튼에 margin-bottom을 준다? 그런데 button은 공통적 요소로 우리가 두기로 했잖아.. 그러면 다른 곳에서도 margin-bottom이 적용 될텐데?? 그러면 차라리 margin들을 사용할수 있게끔 하는 다양한 클래스를 만들어 주자*/

/* util */

.mb_5 {
  margin-bottom: 5px;
}
.mb_10 {
  margin-bottom: 10px;
}

.mb_15 {
  margin-bottom: 15px;
}

.mb_20 {
  margin-bottom: 20px;
}

/* Typograph */

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: normal;
  font-size: 100%;
  /* 부모의 font-size를 받아옴 
  일반적인 폰트사이즈는 16px */
}

/* mediaqueries */

@media screen and (max-width: 768px) {
  .l_sidebar {
    width: auto;
    float: none;
  }
}

@media screen and (max-width: 480px) {
  .course-cover {
    text-align: center;
  }
  .course-creator {
    float: none;
    margin: 0;
    width: auto;
    text-align: center;
  }
}
